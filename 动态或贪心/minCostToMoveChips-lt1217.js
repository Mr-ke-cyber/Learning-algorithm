// 数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。
//
// 你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：
//
// 将第 i 个筹码向左或者右移动 2 个单位，代价为 0。
// 将第 i 个筹码向左或者右移动 1 个单位，代价为 1。
// 最开始的时候，同一位置上也可能放着两个或者更多的筹码。
//
// 返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。
// 示例 1：
//
// 输入：chips = [1,2,3]
// 输出：1
// 解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。
// 示例 2：
//
// 输入：chips = [2,2,2,3,3]
// 输出：2
// 解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。
//  
// 提示：
// 1 <= chips.length <= 100
// 1 <= chips[i] <= 10^9
/**
 * @param {number[]} chips
 * @return {number}
 */
var minCostToMoveChips = function(chips) {
    /**这道题还是需要认真读题，没找到窍门的话很难用简单的方法做出来
    关键点在于：位置为偶数的砝码移动到偶数位置步数为0，位置为奇数的砝码移动到奇数位置的步数为1，因而只需要找出奇数位置和偶数位置的个数进行对比，取最小那一部分的即可。*/
    let odd = 0;
    let even = 0;
    for (let i of chips) {
        if (i % 2 === 0) {
            even++;
        } else {
            odd++;
        }
    }
    return Math.min(odd, even);
};

let result = minCostToMoveChips([1,2,3]);
console.log(result);



