// 在计算机界中，我们总是追求用有限的资源获取最大的收益。
// 现在，假设你分别支配着 m 个 0 和 n 个 1。另外，还有一个仅包含 0 和 1 字符串的数组。
// 你的任务是使用给定的 m 个 0 和 n 个 1 ，找到能拼出存在于数组中的字符串的最大数量。每个 0 和 1 至多被使用一次。
//
//
// 示例 1:
//
// 输入: strs = ["10", "0001", "111001", "1", "0"], m = 5, n = 3
// 输出: 4
// 解释: 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 "10","0001","1","0" 。
// 示例 2:
//
// 输入: strs = ["10", "0", "1"], m = 1, n = 1
// 输出: 2
// 解释: 你可以拼出 "10"，但之后就没有剩余数字了。更好的选择是拼出 "0" 和 "1" 。
/**
 * @param {string[]} strs
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
var findMaxForm = function (strs, m, n) {
    strs.sort((a, b) => {
        return a.length - b.length;
    });
    let res = 0;
    strs.forEach(item => {
        for (let i = 0; i < item.length; i++) {
            if (item.charAt(i) === "0") {
                if (m === 0) {
                    return res;
                }
                m--;
            } else if (item.charAt(i) === "1") {
                if (n === 0) {
                    return res;
                }
                n--;
            }
        }
        res++;
    });
    return res;
};
let result = findMaxForm(["111","1000","1000","1000"],9,3);
console.log(result, 'result');
